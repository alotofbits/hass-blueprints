blueprint:
  name: Powerctrl Actor (Priority-based Switch Controller)
  description: >
    Powerctrl Actor: Controls a single device based on global allowed priority, device's own priority, and optional overrides.
    Supports simulation mode and logs all actions. Version 1.0.0.
  domain: automation
  source_url: https://github.com/alotofbits/powerctrl-actor-blueprint
  metadata:
    version: 1.0.0
    author: "Fredrik Baecklund / OpenAI ChatGPT"
    last_modified: 2025-07-15

  input:
    actor_entity:
      name: Actor Entity
      description: "Switch, climate, script, or other entity to be controlled"
      selector:
        entity: {}

    actor_priority:
      name: Actor Priority
      description: "Input_number with priority for this actor (integer, 1 = highest)"
      selector:
        entity:
          domain: input_number

    global_priority:
      name: Global Allowed Priority
      description: "input_number or input_select set by controller (global allowed max priority)"
      selector:
        entity:
          domain: [input_number, input_select]

    override_force_on:
      name: Force On Helper
      description: "input_boolean to force ON regardless of priority"
      default: ""
      selector:
        entity:
          domain: input_boolean

    override_force_off:
      name: Force Off Helper
      description: "input_boolean to force OFF regardless of priority"
      default: ""
      selector:
        entity:
          domain: input_boolean

    simulation_mode:
      name: Simulation Mode
      description: "input_boolean for simulation/testing (log only, no actions)"
      default: input_boolean.powerctrl_simulation_global
      selector:
        entity:
          domain: input_boolean

mode: single

trigger:
  - platform: state
    entity_id:
      - !input actor_priority
      - !input global_priority
      - !input override_force_on
      - !input override_force_off
      - !input simulation_mode

variables:
  actor_prio: "{{ states(!input actor_priority) | int(99) }}"
  global_prio: "{{ states(!input global_priority) | int(99) }}"
  force_on: "{{ !input override_force_on != '' and is_state(!input override_force_on, 'on') }}"
  force_off: "{{ !input override_force_off != '' and is_state(!input override_force_off, 'on') }}"
  sim_mode: "{{ is_state(!input simulation_mode, 'on') }}"
  actor_state: "{{ states(!input actor_entity) }}"

action:
  - choose:
      - conditions: "{{ force_on }}"
        sequence:
          - choose:
              - conditions: "{{ not sim_mode and actor_state != 'on' }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input actor_entity
          - service: persistent_notification.create
            data:
              title: "[Powerctrl Actor] Forced ON"
              message: |
                Force ON activated for {{ !input actor_entity }}. Turned ON (sim_mode: {{ sim_mode }}).
      - conditions: "{{ force_off }}"
        sequence:
          - choose:
              - conditions: "{{ not sim_mode and actor_state != 'off' }}"
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: !input actor_entity
          - service: persistent_notification.create
            data:
              title: "[Powerctrl Actor] Forced OFF"
              message: |
                Force OFF activated for {{ !input actor_entity }}. Turned OFF (sim_mode: {{ sim_mode }}).
      - conditions: "{{ actor_prio <= global_prio }}"
        sequence:
          - choose:
              - conditions: "{{ not sim_mode and actor_state != 'on' }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input actor_entity
          - service: persistent_notification.create
            data:
              title: "[Powerctrl Actor] Enabled"
              message: |
                {{ !input actor_entity }} turned ON.
                actor_prio: {{ actor_prio }}, global_prio: {{ global_prio }}, sim_mode: {{ sim_mode }}
      - conditions: []
        sequence:
          - choose:
              - conditions: "{{ not sim_mode and actor_state != 'off' }}"
                sequence:
                  - service: homeassistant.turn_off
                    target:
                      entity_id: !input actor_entity
          - service: persistent_notification.create
            data:
              title: "[Powerctrl Actor] Disabled"
              message: |
                {{ !input actor_entity }} turned OFF.
                actor_prio: {{ actor_prio }}, global_prio: {{ global_prio }}, sim_mode: {{ sim_mode }}

# End of blueprint v1.0.0
