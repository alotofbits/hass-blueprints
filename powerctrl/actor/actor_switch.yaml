blueprint:
  name: PowerCtrl Switch Actuator
  description: |
    Version: 1.1.0
    Controls a switch based on available power and priority.
    Turns OFF if power is insufficient or mode is critical.
    Simulation-safe. Notifies when actions are taken.
  domain: automation
  input:
    target_switch:
      name: Target switch to control
      selector:
        entity:
          domain: switch
    device_priority:
      name: Priority level (1-20, lower = more important)
      selector:
        entity:
          domain: input_number
    available_power:
      name: Available power (kW)
      selector:
        entity:
          domain: input_number
    simulation_flag_global:
      name: Global simulation flag
      selector:
        entity:
          domain: input_boolean
    simulation_flag_local:
      name: Local simulation flag
      selector:
        entity:
          domain: input_boolean
    power_mode:
      name: Power mode
      selector:
        entity:
          domain: input_select
    min_power_required:
      name: Minimum required power to turn on (kW)
      default: 0.5
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          unit_of_measurement: kW
          mode: slider
    notification_target:
      name: Notification service (optional)
      default: ""
      selector:
        service: {}

mode: single
trigger:
  - platform: time_pattern
    minutes: "/1"

variables:
  prio: "{{ states(input.device_priority) | int(10) }}"
  available_kw: "{{ states(input.available_power) | float(0) }}"
  min_kw: "{{ input.min_power_required | float(0.5) }}"
  mode: "{{ states(input.power_mode) }}"
  sim_global: "{{ is_state(input.simulation_flag_global, 'on') }}"
  sim_local: "{{ is_state(input.simulation_flag_local, 'on') }}"
  is_on: "{{ is_state(input.target_switch, 'on') }}"
  allowed_to_run: >
    {{
      available_kw >= min_kw and not (mode == 'critical' and prio > 5)
    }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ allowed_to_run and not is_on and not (sim_global or sim_local) }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input target_switch

      - conditions:
          - condition: template
            value_template: "{{ not allowed_to_run and is_on and not (sim_global or sim_local) }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input target_switch

      - conditions:
          - condition: template
            value_template: "{{ sim_global or sim_local }}"
        sequence:
          - service: persistent_notification.create
            data:
              message: >
                Simulation: Would set {{ input.target_switch }} to
                {{ 'ON' if allowed_to_run else 'OFF' }} (prio={{ prio }}, available={{ available_kw }} kW, mode={{ mode }})
              title: PowerCtrl Simulation

  - choose:
      - conditions:
          - condition: template
            value_template: "{{ input.notification_target != '' }}"
        sequence:
          - service: !input notification_target
            data:
              message: >
                PowerCtrl Action: {{ input.target_switch }} â†’ {{ 'ON' if allowed_to_run else 'OFF' }}
                Mode: {{ mode }}, Prio: {{ prio }}, Available: {{ available_kw }} kW
              title: PowerCtrl Actuator